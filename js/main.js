// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var AUTOSTART, DEBUG, FORM_ID, MAP_HATTRICK_SKILLS, OPTION_FORM_ID, TABLE_ID, WageWizard, checkIframe, checkMotherClubBonus, colorizePercent, createAlert, createCountryDropbox, createPlayerFromForm, createSubstitutionAlert, disableAdvancedMode, disableCHPPMode, enableAdvancedMode, enableCHPPMode, fillDataField, fillForm, fillTeamWageTable, formSerialize, format, getWageInUserCurrency, gup, isAdvancedModeEnabled, isChartsEnabled, isOnlySecondHalfEnabled, isPressingEnabled, isVerboseModeEnabled, loginMenuHide, loginMenuShow, number_format, plot_redraw, previousPoint, rateToString, refreshTable, resetAndHideTabs, salaryToString, scrollUpToResults, setDescriptionFields, setDiscountedSalary, setPlayerFormFields, setPlayerWageTable, setTableFields, setupCHPPPlayerFields, showTooltip, sortCHPPPlayerFields, sort_by, stripeTable, updateCHPPPlayerFields, updatePredictions;

  window.WageWizard = window.WageWizard || {};

  WageWizard = window.WageWizard;

  WageWizard.CONFIG = WageWizard.CONFIG || {};

  $.extend(WageWizard.CONFIG, {
    FORM_ID: "#formPlayersInfo",
    OPTION_FORM_ID: "#optionForm",
    TABLE_ID: "#playersInfoTable",
    SEASON_WEEKS: 16,
    DEBUG: false,
    DEBUG_STEP: 1,
    AUTOSTART: true
  }, MAP_HATTRICK_SKILLS = {
    Keeper: 'KeeperSkill',
    Defending: 'DefenderSkill',
    Playmaking: 'PlaymakerSkill',
    Passing: 'PassingSkill',
    Winger: 'WingerSkill',
    Scoring: 'ScorerSkill',
    SetPieces: 'SetPiecesSkill'
  }, {
    PR_ENUM_SKILL: {
      Keeper: 0,
      Defending: 1,
      Playmaking: 2,
      Winger: 3,
      Passing: 4,
      Scoring: 5
    },
    PLOT_OPTIONS: {
      shadowSize: 0,
      lines: {
        show: true,
        lineWidth: 2,
        steps: false
      },
      points: {
        show: false,
        radius: 3
      },
      xaxis: {
        color: "#666666",
        ticks: [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 89]
      },
      yaxis: {
        color: "#666666",
        tickFormatter: function(val, axis) {
          return val.toFixed(2);
        }
      },
      grid: {
        backgroundColor: null,
        color: null,
        borderWidth: 2,
        borderColor: "#AAAAAA",
        hoverable: true,
        labelMargin: 15
      }
    }
  });

  format = function(source, params) {
    if (arguments.length === 1) {
      return function() {
        var args;
        args = $.makeArray(arguments);
        args.unshift(source);
        return format.apply(this, args);
      };
    }
    if (arguments.length > 2 && params.constructor !== Array) {
      params = $.makeArray(arguments).slice(1);
    }
    if (params.constructor !== Array) {
      params = [params];
    }
    $.each(params, function(i, n) {
      source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
    });
    return source;
  };

  createSubstitutionAlert = function(substituteAtArray, mayNotReplace) {
    var body, check_with, l, minute, r, range, ranges, result, title, _i, _j, _len, _len1;
    ranges = [];
    r = 0;
    for (_i = 0, _len = substituteAtArray.length; _i < _len; _i++) {
      minute = substituteAtArray[_i];
      if (!ranges[r]) {
        ranges[r] = [];
        ranges[r].push(minute);
        check_with = minute + 1;
      } else if (minute !== check_with) {
        if (ranges[r][ranges[r].length - 1] !== check_with - 1) {
          ranges[r].push(check_with - 1);
        }
        r++;
        _i--;
      } else if (minute === check_with) {
        check_with = minute + 1;
      }
      if (_i === _len - 1) {
        l = ranges[r].length - 1;
        if (ranges[r][l] !== minute) {
          ranges[r].push(minute);
        }
      }
    }
    result = [];
    for (_j = 0, _len1 = ranges.length; _j < _len1; _j++) {
      range = ranges[_j];
      result.push(range.join("-"));
    }
    title = "";
    body = "";
    if (substituteAtArray.length > 0) {
      title = "";
      if (substituteAtArray.length === 1) {
        title += "" + WageWizard.messages.replace + " " + WageWizard.messages.at_minute;
      } else {
        title += "" + WageWizard.messages.replace + " " + WageWizard.messages.at_minutes;
      }
      body = "<span class=\"minutes\">" + (result.join(", ")) + "</span>";
      if (mayNotReplace) {
        body += "" + WageWizard.messages.may_not_replace;
      }
    } else {
      title = WageWizard.messages.do_not_replace;
    }
    $('#AlertsContainer').append(createAlert({
      "id": "formSubstituteAt",
      "type": "success",
      "title": title,
      "body": body
    }));
  };

  resetAndHideTabs = function() {
    $("#tabChartsNav").hide();
    $("#tabContributionsNav").hide();
    $("#tabDebugNav").hide();
    $("#chartTotal").html("");
    $("#chartPartials").html("");
    $("#tabContributions").html("");
    return $("#tabDebug").html("");
  };

  FORM_ID = WageWizard.CONFIG.FORM_ID;

  OPTION_FORM_ID = WageWizard.CONFIG.OPTION_FORM_ID;

  TABLE_ID = WageWizard.CONFIG.TABLE_ID;

  DEBUG = WageWizard.CONFIG.DEBUG;

  AUTOSTART = WageWizard.CONFIG.AUTOSTART;

  WageWizard.predictions = WageWizard.CONFIG.PREDICTIONS_HO;

  $('.dropdown-menu').find('form').click(function(e) {
    return e.stopPropagation();
  });

  checkIframe = function() {
    if (top.location !== self.location) {
      return top.location = self.location;
    }
  };

  $(FORM_ID).validate({
    ignore: ".ignore",
    errorContainer: "#formErrors",
    errorLabelContainer: "#formErrorsUl",
    errorElement: "li",
    focusInvalid: true,
    showErrors: function(errorMap, errorList) {
      if (this.numberOfInvalids() === 0) {
        $("#formErrors").remove();
      }
      this.defaultShowErrors();
    },
    errorPlacement: function(error, element) {
      return null;
    },
    invalidHandler: function(form, validator) {
      var error, errors, message, _i, _len, _ref;
      errors = validator.numberOfInvalids();
      if (errors) {
        if (errors === 1) {
          message = WageWizard.messages.validation_error;
        }
        if (errors > 1) {
          message = WageWizard.messages.validation_errors(errors);
        }
        $("#formErrors").remove();
        if (validator.errorList.length > 0) {
          $('#AlertsContainer').append(createAlert({
            "id": "formErrors",
            "type": "error",
            "title": message,
            "body": "<ul id=\"formErrorsUl\"></ul>"
          }));
          _ref = validator.errorList;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            error = _ref[_i];
            $("#formErrorsUl").append("<li>" + ($(error.element).data("fieldName")) + ": " + error.message + "</li>");
          }
        } else {
          $('#formErrors').dismiss();
        }
        validator.focusInvalid();
      }
    },
    submitHandler: function(form) {
      var css_classes, dataset, isMax, isMin, minute, minuteObject, note, p1Contribution, p2Contribution, percentContribution, player1LowStamina, player2LowStamina, plot_options, result, tableHeader, tableSeparator, tempHTML, totalContribution, warnings_list;
      $("#calculate").addClass('disabled');
      resetAndHideTabs();
      $("#AlertsContainer").html("");
      result = WageWizard.Engine.start();
      warnings_list = "";
      if (result.player2_stronger_than_player1) {
        warnings_list += "<li>" + WageWizard.messages.player2_stronger_than_player1 + "</li>";
      }
      if (result.player1_low_stamina_se_risk) {
        warnings_list += "<li>" + (WageWizard.messages.player1_low_stamina_se(result.player1_low_stamina_se)) + "</li>";
      }
      if (result.player2_low_stamina_se_risk) {
        warnings_list += "<li>" + (WageWizard.messages.player2_low_stamina_se(result.player2_low_stamina_se)) + "</li>";
      }
      if (result.bestInFirstHalf && isOnlySecondHalfEnabled()) {
        warnings_list += "<li>" + WageWizard.messages.best_in_first_half + "</li>";
      }
      if (warnings_list !== "") {
        $('#AlertsContainer').append(createAlert({
          "id": "formWarnings",
          "type": "warning",
          "title": WageWizard.messages.status_warning,
          "body": "<ul>" + warnings_list + "</ul>"
        }));
      }
      if (isVerboseModeEnabled()) {
        tempHTML = "<h3 class=\"legend-like\">" + WageWizard.messages.strength_table + "</h3>\n<table class=\"table table-striped table-condensed table-staminia table-staminia-strength width-auto\">\n  <thead>\n    <tr>\n      <th></th><th>" + WageWizard.messages.player1 + "</th><th>" + WageWizard.messages.player2 + "</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>" + WageWizard.messages.strength + "</td>\n      <td>" + (number_format(result.player1Strength, 2)) + "</td>\n      <td>" + (number_format(result.player2Strength, 2)) + "</td>\n    </tr>\n    <tr>\n      <td>" + WageWizard.messages.strength_st_independent + "</td>\n      <td>" + (number_format(result.player1StrengthStaminaIndependent, 2)) + "</td>\n      <td>" + (number_format(result.player2StrengthStaminaIndependent, 2)) + "</td>\n    </tr>\n  </tbody>\n</table>\n<p><small>" + WageWizard.messages.used_in_calculation + "</small></p>";
        $("#tabContributions").append(tempHTML);
        tableHeader = "<thead>\n  <tr>\n    <th class=\"min-width\">" + WageWizard.messages.substitution_minute + "</th>\n    <th>" + WageWizard.messages.total_contribution + "</th>\n    <th>" + WageWizard.messages.contribution_percent + "</th>\n    <th>" + WageWizard.messages.p1_contrib + "</th>\n    <th>" + WageWizard.messages.p2_contrib + "</th>\n    <th>" + WageWizard.messages.notes + "</th>\n  </tr>\n</thead>";
        tableSeparator = "<tr><td colspan='6'></td></tr>";
        tempHTML = "<h3 class=\"legend-like\">" + WageWizard.messages.contribution_table + "</h3>\n<table class=\"table table-striped table-condensed table-staminia table-staminia-contributions\">\n  " + tableHeader + "\n  <tbody>";
        player1LowStamina = String(result.player1_low_stamina_se);
        player2LowStamina = String(result.player2_low_stamina_se);
        for (minute in result.minutes) {
          minuteObject = result.minutes[minute];
          totalContribution = minuteObject.total;
          percentContribution = minuteObject.percent;
          p1Contribution = minuteObject.p1;
          p2Contribution = minuteObject.p2;
          isMax = minuteObject.isMax;
          isMin = minuteObject.isMin;
          if (minute === "46") {
            tempHTML += tableHeader;
          }
          note = (isMax ? "MAX" : (isMin ? "MIN" : (100 - percentContribution < 1 ? "~ 1%" : ""))) + (minute === player1LowStamina ? " " + WageWizard.messages.p1_low_stamina : "") + (minute === player2LowStamina ? " " + WageWizard.messages.p2_low_stamina : "");
          css_classes = (isMax ? " max" : "") + (isMin ? " min" : "");
          tempHTML += "<tr class=\"" + css_classes + "\">\n  <td>" + minute + "</td>\n  <td>" + totalContribution + "</td>\n  <td>" + percentContribution + "%</td>\n  <td>" + p1Contribution + "</td>\n  <td>" + p2Contribution + "</td>\n  <td>" + note + "</td>\n</tr>";
        }
        tempHTML += "</tbody></table>";
        $("#tabContributions").append(tempHTML);
        $("#tabContributionsNav").show();
      }
      if (isChartsEnabled()) {
        plot_options = $.extend(true, {}, WageWizard.CONFIG.PLOT_OPTIONS);
        $.extend(true, plot_options, {
          lines: {
            fill: true,
            fillColor: "rgba(0,136,204,0.1)"
          },
          points: {
            fillColor: "#0088CC"
          },
          yaxis: {
            min: Number(result.min * 0.99),
            max: Number(result.max * 1.01)
          }
        });
        document.plot1 = $.plot($('#chartTotal'), [
          {
            data: result.plotDataTotal[0],
            color: "#0088CC"
          }
        ], plot_options);
        dataset = [
          {
            data: result.plotDataPartial[0],
            color: "#BD362F",
            label: WageWizard.messages.p1_contrib,
            points: {
              fillColor: "#BD362F"
            },
            lines: {
              fill: true,
              fillColor: "rgba(189,54,47,0.1)"
            }
          }, {
            data: result.plotDataPartial[1],
            color: "#51A351",
            label: WageWizard.messages.p2_contrib,
            points: {
              fillColor: "#51A351"
            },
            lines: {
              fill: true,
              fillColor: "rgba(81,163,81,0.10)"
            }
          }
        ];
        plot_options = $.extend(true, {}, WageWizard.CONFIG.PLOT_OPTIONS);
        $.extend(true, plot_options, {
          legend: {
            position: "se",
            labelBoxBorderColor: "#cccccc",
            margin: [10, 10],
            backgroundColor: "#ffffff",
            backgroundOpacity: 0.5,
            borderColor: "#cccccc"
          }
        });
        document.plot2 = $.plot($('#chartPartials'), dataset, plot_options);
        $("#tabChartsNav").show();
      }
      createSubstitutionAlert((isOnlySecondHalfEnabled() ? result.substituteAtSecondHalf : result.substituteAt), result.mayNotReplace);
      if (isChartsEnabled()) {
        $("#tabChartsNav").find("a").tab("show");
        setTimeout(function() {
          plot_redraw(document.plot1);
          return plot_redraw(document.plot2);
        }, 500);
      } else if (isVerboseModeEnabled()) {
        $("#tabContributionsNav").find("a").tab("show");
      }
      scrollUpToResults();
      $("#calculate").removeClass('disabled');
    },
    highlight: function(element, errorClass, validClass) {
      $(element).closest("div").addClass(errorClass).removeClass(validClass);
    },
    unhighlight: function(element, errorClass, validClass) {
      $(element).closest("div").removeClass(errorClass).addClass(validClass);
    }
  });

  gup = function(name) {
    var regex, regexS, results;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(window.location.search);
    if (results != null) {
      return results[1];
    }
  };

  number_format = function(number, decimals, dec_point, thousands_sep) {
    var n, prec, s, toFixedFix;
    if (number == null) {
      number = "";
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (dec_point == null) {
      dec_point = ".";
    }
    if (thousands_sep == null) {
      thousands_sep = ",";
    }
    number = (String(number)).replace(/[^0-9+\-Ee.]/g, "");
    n = isFinite(number) ? number : 0;
    prec = isFinite(decimals) ? Math.abs(decimals) : 0;
    s = "";
    toFixedFix = function(n, prec) {
      var k;
      k = Math.pow(10, prec);
      return "" + Math.round(n * k) / k;
    };
    s = (prec ? toFixedFix(n, prec) : "" + Math.round(n)).split('.');
    if (s[0].length > 3) {
      s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, thousands_sep);
    }
    if ((s[1] || "").length < prec) {
      s[1] = s[1] || "";
      s[1] += new Array(prec - s[1].length + 1).join("0");
    }
    return s.join(dec_point);
  };

  scrollUpToResults = function() {
    var $elem, docViewTop, elemTop;
    $elem = $(".nav-tabs");
    docViewTop = $(window).scrollTop();
    elemTop = $elem.offset().top;
    if (docViewTop > elemTop) {
      return $('html, body').animate({
        scrollTop: elemTop
      }, 200);
    }
  };

  stripeTable = function() {
    $("" + TABLE_ID + " tr td, " + TABLE_ID + " tr th").removeClass("stripe");
    return $("" + TABLE_ID + " tr:visible:odd td, " + TABLE_ID + " tr:visible:odd td").addClass("stripe");
  };

  createAlert = function(params) {
    return "<div class=\"alert alert-block alert-" + params.type + " fade in\" id=\"" + params.id + "\">\n  <button class=\"close\" data-dismiss=\"alert\" type=\"button\">&times;</button>\n  <h4 class=\"alert-heading\">" + params.title + "</h4>\n  <p id=\"" + params.id + "Body\">" + params.body + "</p>\n</div>";
  };

  enableAdvancedMode = function() {
    $("#WageWizard_Options_AdvancedMode_Predictions").find(".btn").prop('disabled', false);
    $("" + TABLE_ID + " tr[class~='simple']").addClass("hide").hide();
    $("" + FORM_ID + " *[name*=_]").addClass("ignore");
    $("" + TABLE_ID + " tr[class~=advanced]:not([id*=_Advanced_])").removeClass("hide").show();
    $("#WageWizard_Options_Predictions_Type").slideDown();
    showSkillsByPosition();
  };

  disableAdvancedMode = function() {
    $("#WageWizard_Options_AdvancedMode_Predictions").find(".btn").prop('disabled', false);
    $("" + TABLE_ID + " tr[class~='advanced']").addClass("hide").hide();
    $("" + FORM_ID + " *[name*=_Advanced_]").addClass("ignore");
    $("" + FORM_ID + " *[name*=_]").removeClass("ignore");
    $("" + TABLE_ID + " tr[class~='simple']").removeClass("hide").show();
    $("#WageWizard_Options_Predictions_Type").slideUp();
  };

  isOnlySecondHalfEnabled = function() {
    return $("#WageWizard_Options_OnlySecondHalf").prop('checked');
  };

  isChartsEnabled = function() {
    return $("#WageWizard_Options_Charts").prop('checked');
  };

  isVerboseModeEnabled = function() {
    return $("#WageWizard_Options_VerboseMode").prop('checked');
  };

  isPressingEnabled = function() {
    return $("#WageWizard_Options_Pressing").prop('checked');
  };

  isAdvancedModeEnabled = function() {
    return $("#WageWizard_Options_AdvancedMode").prop('checked');
  };

  enableCHPPMode = function() {
    $("#tabTeamNav, #WageWizard_CHPP").show();
  };

  disableCHPPMode = function() {
    $("#tabTeamNav, #WageWizard_CHPP").hide();
  };

  fillForm = function() {
    var $field, field, fields, i, params, paramsString, _i, _len;
    paramsString = gup("params");
    if (paramsString == null) {
      return;
    }
    params = decodeURI(paramsString).split("-");
    fields = $('*[name^=WageWizard_]');
    for (i = _i = 0, _len = fields.length; _i < _len; i = ++_i) {
      field = fields[i];
      $field = $(field);
      switch ($field.attr('type')) {
        case 'checkbox':
        case 'radio':
          $field.prop('checked', params[i] === 'true');
          break;
        default:
          $field.val(params[i]);
      }
    }
    if (isAdvancedModeEnabled()) {
      enableAdvancedMode();
    } else {
      disableAdvancedMode();
    }
    checkMotherClubBonus();
    updatePredictions();
  };

  checkMotherClubBonus = function() {
    var playerId, status, _i, _len, _ref;
    _ref = [1, 2];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      playerId = _ref[_i];
      status = $("input[name=WageWizard_Player_" + playerId + "_MotherClubBonus]").prop('checked');
      $("select[name=WageWizard_Player_" + playerId + "_Loyalty]").prop('disabled', status);
      $("input[name=WageWizard_Advanced_Player_" + playerId + "_Loyalty]").prop('disabled', status);
    }
  };

  updatePredictions = function() {
    if ($('input[name="WageWizard_Options_Predictions_Type"]:checked').val() === 'ho') {
      WageWizard.predictions = WageWizard.CONFIG.PREDICTIONS_HO;
    } else {
      WageWizard.predictions = WageWizard.CONFIG.PREDICTIONS_ANDREAC;
    }
  };

  formSerialize = function() {
    var serializedFields;
    serializedFields = [];
    $('*[name^="WageWizard_"]').each(function() {
      var $this;
      $this = $(this);
      switch ($this.attr('type')) {
        case 'checkbox':
        case 'radio':
          return serializedFields.push($this.prop('checked'));
        default:
          return serializedFields.push($this.val());
      }
    });
    return encodeURI(serializedFields.join("-"));
  };

  $("#getLink").on("click", function(e) {
    var body, clippy, link, locale;
    if (!$(FORM_ID).validate().form()) {
      $("#generatedLink").alert('close');
      return;
    }
    link = document.location.href.split("?")[0];
    locale = gup("locale");
    if (locale != null) {
      link += "?locale=" + locale + "&amp;";
    } else {
      link += "?";
    }
    link += "params=" + (formSerialize());
    clippy = "&nbsp;<span class=\"clippy\" data-clipboard-text=\"" + link + "\" id=\"staminiaClippy\"></span>";
    body = link;
    if ($("#generatedLinkBody").length) {
      $("#copyLinkToClipboard").data("text", link);
      $("#staminiaClippy").attr("data-clipboard-text", link);
      $("#generatedLinkBody").fadeOut("fast", function() {
        return $(this).html(body).fadeIn("fast");
      });
    } else {
      $("#AlertsContainer").append(createAlert({
        "id": "generatedLink",
        "type": "info",
        "body": body,
        "title": WageWizard.messages.copy_link + " " + clippy
      }));
      new WageWizard.ClippableBehavior($("#staminiaClippy")[0]);
    }
    scrollUpToResults();
  });

  $('#switchPlayers').click(function() {
    $("" + FORM_ID + " *[name*=_Player_1_]").each(function() {
      var $p2Field, $this, form, p1Checked, p1Disabled, p1Value, p2Field;
      form = $(FORM_ID)[0];
      p2Field = form[this.name.replace('_1', '_2')];
      $this = $(this);
      $p2Field = $(p2Field);
      p1Value = this.value;
      p1Disabled = $this.prop('disabled');
      p1Checked = $this.prop('checked');
      $this.val($p2Field.val());
      $this.prop('disabled', $p2Field.prop('disabled'));
      $this.prop('checked', $p2Field.prop('checked'));
      $p2Field.val(p1Value);
      $p2Field.prop('disabled', p1Disabled);
      return $p2Field.prop('checked', p1Checked);
    });
    checkMotherClubBonus();
    $('.control-group').removeClass('error');
    $(FORM_ID).validate().form();
  });

  $('#WageWizard_Options_AdvancedMode').on('change', function(e) {
    if ($(this).prop('checked')) {
      enableAdvancedMode();
    } else {
      disableAdvancedMode();
    }
  });

  $('.motherclub-bonus-checkbox').on('change', function(e) {
    checkMotherClubBonus();
  });

  $('input[name="WageWizard_Options_Predictions_Type"]').on('change', function(e) {
    return updatePredictions();
  });

  $('input[data-validate="range"], select[data-validate="range"]').each(function() {
    return $(this).rules('add', {
      range: [$(this).data('rangeMin'), $(this).data('rangeMax')]
    });
  });

  $('a[data-toggle="tab"]').on('shown', function(e) {
    if ($(e.target).attr("href") === "#tabCredits") {
      $("#AlertsContainer").hide();
    } else {
      $("#AlertsContainer").show();
    }
    if ($(e.target).attr("href") === "#tabCharts") {
      plot_redraw(document.plot1);
      plot_redraw(document.plot2);
    }
  });

  $("#resetApp").on("click", function(e) {
    $("" + FORM_ID + ", " + OPTION_FORM_ID).each(function() {
      if (typeof this.reset === 'function' || (typeof this.reset === 'object' && !this.reset.nodeType)) {
        return this.reset();
      }
    });
    $('.control-group').removeClass("error");
    $("#AlertsContainer").html("");
    resetAndHideTabs();
    checkMotherClubBonus();
    disableAdvancedMode();
    setupCHPPPlayerFields();
    return e.preventDefault();
  });

  $.validator.methods.range = function(value, element, param) {
    var globalizedValue;
    globalizedValue = value.replace(",", ".");
    return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
  };

  $.validator.methods.number = function(value, element) {
    return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
  };

  $.validator.addMethod("position", function(value, element, params) {
    return this.optional(element) || value >= params[0] && value <= params[1];
  }, jQuery.validator.messages.required);

  $.ajaxSetup({
    dataType: "json",
    timeout: 30000,
    beforeSend: function(XMLHttpRequest, settings) {
      $("#CHPP_Refresh_Data").button('loading');
      $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-time");
      $("#CHPP_Refresh_Data_Status").find("i").attr("title", "");
      $("#CHPP_Refresh_Data_Status").prop('disabled', true);
      $("#CHPP_Refresh_Data_Status").removeClass("btn-danger btn-success btn-warning").addClass("btn-progress");
      $("#CHPP_Results").hide();
      return $("#CHPP_Status_Description").html("");
    },
    success: function(jsonObject, textStatus, xhr) {
      var PlayersData, description_message, error_message;
      switch (jsonObject.Status) {
        case "OK":
          try {
            $("#menuLoginTitle").text(jsonObject.TeamName);
            PlayersData = jsonObject.PlayersData;
            WageWizard.PlayersData = PlayersData;
            WageWizard.CountryDetails = WageWizard.COUNTRY_DETAILS[jsonObject.CountryID];
            WageWizard.Engine.start();
            fillTeamWageTable();
            setupCHPPPlayerFields(true);
            loginMenuHide();
            enableCHPPMode();
            if (jsonObject.RefreshThrottle) {
              $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-warning-sign");
              $("#CHPP_Refresh_Data_Status").find("i").attr("title", WageWizard.messages.status_warning);
              $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-danger btn-success").addClass("btn-warning");
              $("#CHPP_Status_Description").text(WageWizard.messages.refresh_throttle(jsonObject.RefreshThrottle));
            } else {
              $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-ok");
              $("#CHPP_Refresh_Data_Status").find("i").attr("title", WageWizard.messages.status_ok);
              $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-danger btn-warning").addClass("btn-success");
            }
            $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("successText"));
          } catch (error) {
            if (WageWizard.CONFIG.DEBUG) {
              console.log(error);
              console.log(error.stack);
            }
            $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-remove");
            $("#CHPP_Refresh_Data_Status").find("i").attr("title", WageWizard.messages.status_error);
            $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-success btn-warning").addClass("btn-danger");
            loginMenuShow();
            $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("errorText"));
            $("#CHPP_Status_Description").html("" + WageWizard.messages.error_unknown + ".<br/>\n" + WageWizard.messages.retry_to_authorize + ".");
          }
          break;
        case "Error":
          switch (jsonObject.ErrorCode) {
            case "InvalidToken":
              error_message = WageWizard.messages.error_invalid_token;
              description_message = WageWizard.messages.retry_to_authorize;
              break;
            case "":
              break;
            default:
              error_message = WageWizard.messages.error_unknown;
              description_message = WageWizard.messages.retry_to_authorize;
          }
          $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-remove");
          $("#CHPP_Refresh_Data_Status").find("i").attr("title", WageWizard.messages.status_error);
          $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-success btn-warning").addClass("btn-danger");
          $("#CHPP_Status_Description").html("" + error_message + "<br/>\n" + description_message);
          loginMenuShow();
          $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("errorText"));
      }
      $("#CHPP_Refresh_Data_Status").prop('disabled', false);
    },
    error: function(jqXHR, textStatus, thrownError) {
      var description_message, error_message;
      switch (textStatus) {
        case "timeout":
          error_message = WageWizard.messages.error_timeout;
          description_message = "";
          break;
        case "parsererror":
          error_message = WageWizard.messages.error_parser;
          description_message = "";
          break;
        default:
          error_message = WageWizard.messages.error_unknown;
          description_message = WageWizard.messages.retry_to_authorize;
      }
      $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-remove");
      $("#CHPP_Refresh_Data_Status").find("i").attr("title", WageWizard.messages.status_error);
      $("#CHPP_Refresh_Data_Status").removeClass("btn-success btn-warning").addClass("btn-danger");
      $("#CHPP_Status_Description").html("" + error_message + "<br/>\n" + description_message);
      loginMenuShow();
      $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("errorText"));
      $("#CHPP_Refresh_Data_Status").prop('disabled', false);
    },
    complete: function(jqXHR, textStatus) {
      $("#CHPP_Results").show();
      return $("#CHPP_Refresh_Data").button('complete');
    }
  });

  sort_by = function(field, reverse, primer) {
    reverse = reverse ? -1 : 1;
    return function(a, b) {
      a = field.indexOf("WW-") === 0 ? a.WageWizard[field.substring(3)] : a[field];
      b = field.indexOf("WW-") === 0 ? b.WageWizard[field.substring(3)] : b[field];
      if (primer != null) {
        a = primer(a);
        b = primer(b);
        if (isNaN(a)) {
          a = Infinity;
        }
        if (isNaN(b)) {
          b = Infinity;
        }
      }
      if (a < b) {
        return reverse * -1;
      }
      if (a > b) {
        return reverse * 1;
      }
      return 0;
    };
  };

  sortCHPPPlayerFields = function() {
    var PlayersData, field, primer, reverse;
    PlayersData = WageWizard.PlayersData;
    if (PlayersData == null) {
      return;
    }
    field = "PlayerNumber";
    reverse = false;
    primer = parseInt;
    switch ($("" + FORM_ID + " select[id=CHPP_Players_SortBy]").val()) {
      case "ShirtNumber":
        field = "PlayerNumber";
        break;
      case "Name":
        field = "PlayerName";
        primer = void 0;
        break;
      case "Form":
        field = "PlayerForm";
        reverse = true;
        break;
      case "TSI":
        field = "Tsi";
        reverse = true;
        break;
      case "Stamina":
        field = "StaminaSkill";
        reverse = true;
        break;
      case "Salary":
        field = "Salary";
        reverse = true;
        break;
      case "Keeper":
        field = "KeeperSkill";
        reverse = true;
        break;
      case "Playmaking":
        field = "PlaymakerSkill";
        reverse = true;
        break;
      case "Passing":
        field = "PassingSkill";
        reverse = true;
        break;
      case "Winger":
        field = "WingerSkill";
        reverse = true;
        break;
      case "Defending":
        field = "DefenderSkill";
        reverse = true;
        break;
      case "Scoring":
        field = "ScorerSkill";
        reverse = true;
        break;
      case "SetPieces":
        field = "SetPiecesSkill";
        reverse = true;
        break;
      case "Experience":
        field = "Experience";
        reverse = true;
        break;
      case "Loyalty":
        field = "Loyalty";
        reverse = true;
    }
    PlayersData.sort(sort_by(field, reverse, primer));
  };

  updateCHPPPlayerFields = function() {
    var PlayersData, index, mc, name, number, optionElement, player, select, selectP1, _i, _len;
    PlayersData = WageWizard.PlayersData;
    if (PlayersData == null) {
      return;
    }
    sortCHPPPlayerFields();
    $("#CHPP_Player_1").html("");
    select = $(document.createElement("select"));
    for (index = _i = 0, _len = PlayersData.length; _i < _len; index = ++_i) {
      player = PlayersData[index];
      optionElement = $(document.createElement("option"));
      if ((Number(player.InjuryLevel)) === 0) {
        optionElement.addClass("isBruised");
      }
      if ((Number(player.InjuryLevel)) > 0) {
        optionElement.addClass("isInjured");
      }
      if ((Number(player.Cards)) >= 3) {
        optionElement.addClass("isSuspended");
      }
      if (player.TransferListed) {
        optionElement.addClass("isTransferListed");
      }
      optionElement.attr("value", index);
      name = optionElement.text("" + (number = player.PlayerNumber != null ? player.PlayerNumber + '.' : '') + " " + player.PlayerName + " " + (mc = player.MotherClubBonus ? '\u2665' : ''));
      select.append(optionElement);
    }
    selectP1 = select.clone(true);
    selectP1.attr('id', 'CHPP_Player_1');
    $("#CHPP_Player_1").html(selectP1.html());
  };

  setupCHPPPlayerFields = function(checkUrlParameter) {
    if (checkUrlParameter == null) {
      checkUrlParameter = false;
    }
    updateCHPPPlayerFields();
    $('#CHPP_Player_1 option:eq(0)').prop('selected', true);
    setPlayerFormFields(1, checkUrlParameter);
  };

  $("" + FORM_ID + " select[id=CHPP_Player_1]").on('change', function() {
    setPlayerFormFields(1);
  });

  $("" + FORM_ID + " select[id=CHPP_Player_2]").on('change', function() {
    setPlayerFormFields(2);
  });

  $("" + FORM_ID + " select[id=CHPP_Players_SortBy]").on("change", function() {
    updateCHPPPlayerFields();
    if ($("#CHPP_Player_1 option").length >= 1) {
      $("#CHPP_Player_1 option:eq(0)").prop('selected', true);
      setPlayerFormFields(1);
    }
  });

  getWageInUserCurrency = function(salary) {
    return salary / parseFloat(WageWizard.CountryDetails.CurrencyRate.replace(',', '.'), 10);
  };

  salaryToString = function(salary) {
    var result;
    result = [number_format(getWageInUserCurrency(salary), 0, '', ' '), WageWizard.CountryDetails.CurrencyName];
    return result.join(' ');
  };

  rateToString = function(rate, precision) {
    if (precision == null) {
      precision = 0;
    }
    return "" + (WageWizard.number_format(rate * 100, 2)) + "%";
  };

  colorizePercent = function($element) {
    var direction, hue, value;
    value = parseFloat($element.text());
    if (value === NaN) {
      return;
    }
    direction = $element.data('direction');
    hue = direction === 'asc' ? (121 - value) * 121 / 100 : value * 121 / 100;
    return $element.css('color', "hsl(" + hue + ", 45%, 50%)");
  };

  fillDataField = function($element, target) {
    switch ($element.data('type')) {
      case 'salary':
        $element.text(salaryToString(target));
        break;
      case 'percent':
        $element.text(rateToString(target, 2));
    }
  };

  fillTeamWageTable = function() {
    return $('#WageWizard_Team [data-target]').each(function() {
      var $this;
      $this = $(this);
      fillDataField($this, WageWizard.TeamData[$this.data('target')]);
    });
  };

  setPlayerWageTable = function(player, id) {
    return $("#WageWizard_Player_" + id + " [data-target]").each(function() {
      var $this;
      $this = $(this);
      fillDataField($this, player.WageWizard[$this.data('target')]);
    });
  };

  setDescriptionFields = function(player, id) {
    $("#WageWizard_Description_Player_" + id + "_Avatar").html(player.Avatar);
    $("#WageWizard_Description_Player_" + id + "_Name").text("" + (player.PlayerNumber != null ? "" + player.PlayerNumber + ". " : "") + player.PlayerName);
    $("#WageWizard_Description_Player_" + id + "_Age").text(WageWizard.messages.age(player.Age, player.Days));
    $("#WageWizard_Description_Player_" + id + "_NextBirthday").text(player.NextBirthday);
    $("#WageWizard_Description_Player_" + id + "_Tsi").text(WageWizard.number_format(player.Tsi, 0, '', ' '));
    if (player.Statement) {
      $("#WageWizard_Description_Player_" + id + "_Statement").text(player.Statement).show();
    } else {
      $("#WageWizard_Description_Player_" + id + "_Statement").hide();
    }
    if (player.Abroad) {
      $("#WageWizard_Description_Player_" + id + "_Salary").text(WageWizard.messages.salary_with_bonus(salaryToString(player.Salary)));
    } else {
      $("#WageWizard_Description_Player_" + id + "_Salary").text(WageWizard.messages.salary(salaryToString(player.Salary)));
    }
    $("#WageWizard_Description_Player_" + id).show();
  };

  setTableFields = function(player, id) {
    var k, v, _ref;
    $("#playersInfoTable tr").removeClass('success warning');
    $("#playersInfoTable .btn-radio input").prop('disabled', true).closest('label').addClass('hide');
    $("#WageWizard_Player_" + id + "_Salary").val(player.Salary);
    $("#WageWizard_Player_" + id + "_Age").val(player.Age);
    $("#WageWizard_Player_" + id + "_Abroad").prop('checked', player.Abroad);
    _ref = WageWizard.MAP_HATTRICK_SKILLS;
    for (k in _ref) {
      v = _ref[k];
      $("#WageWizard_Player_" + id + "_" + k).val(player[v]);
      if (k === 'Keeper' || k === 'SetPieces') {
        continue;
      }
      $("#WageWizard_Player_Min_" + id + "_" + k).text(salaryToString(player.WageWizard.Skills[k].min));
      $("#WageWizard_Player_Max_" + id + "_" + k).text(salaryToString(player.WageWizard.Skills[k].max));
      if (player.WageWizard.primary === k) {
        $("#WageWizard_Primary_Player_" + id + "_" + k).closest('label').removeClass('hide');
        $("#WageWizard_Primary_Player_" + id + "_" + k).prop('checked', true);
        $("#WageWizard_Primary_Player_" + id + "_" + k).closest('tr').addClass('success');
      }
    }
    for (k in player.WageWizard.unpredictable_skills) {
      $("#WageWizard_Primary_Player_" + id + "_" + k).closest('label').removeClass('hide');
      $("#WageWizard_Primary_Player_" + id + "_" + k).prop('disabled', false);
      $("#WageWizard_Primary_Player_" + id + "_" + k).closest('tr').addClass('warning');
    }
    $("#WageWizard_Player_Min_" + id + "_SetPieces").text(rateToString(player.WageWizard.Skills['SetPieces'].min));
    $("#WageWizard_Player_Max_" + id + "_SetPieces").text(rateToString(player.WageWizard.Skills['SetPieces'].max));
    $("#WageWizard_Player_" + id + "_Min").text(salaryToString(player.WageWizard.min));
    return $("#WageWizard_Player_" + id + "_Max").text(salaryToString(player.WageWizard.max));
  };

  setPlayerFormFields = function(id, checkUrlParameter) {
    var PlayersData, formReference, player;
    if (checkUrlParameter == null) {
      checkUrlParameter = false;
    }
    if (checkUrlParameter && (gup("params") != null)) {
      return;
    }
    PlayersData = WageWizard.PlayersData;
    formReference = $(FORM_ID)[0];
    if (PlayersData == null) {
      return;
    }
    player = PlayersData[formReference["CHPP_Player_" + id].value];
    if (player == null) {
      return;
    }
    setDescriptionFields(player, id);
    setPlayerWageTable(player, id);
    return setTableFields(player, id);
  };

  loginMenuHide = function() {
    $("#loginDropdown").addClass("hide");
    return $("#loggedInDropdown").removeClass("hide");
  };

  loginMenuShow = function() {
    $("#menuLoginTitle").text("CHPP");
    $("#loggedInDropdown").addClass("hide");
    return $("#loginDropdown").removeClass("hide");
  };

  $("#CHPP_Refresh_Data").on("click", function() {
    return $.ajax({
      url: "chpp/chpp_retrievedata.php?refresh",
      cache: false
    });
  });

  $("#CHPP_Revoke_Auth_Link").on("click", function() {
    $(this).closest("[class~='open']").removeClass('open');
    return window.confirm(WageWizard.messages.revoke_auth_confirm);
  });

  plot_redraw = function(plot) {
    if (plot == null) {
      return;
    }
    plot.resize();
    plot.setupGrid();
    return plot.draw();
  };

  $(window).resize($.debounce(500, function() {
    if (!$("#tabChartsNav").hasClass("active")) {
      return;
    }
    if (document.plot1 != null) {
      plot_redraw(document.plot1);
    }
    if (document.plot2 != null) {
      return plot_redraw(document.plot2);
    }
  }));

  showTooltip = function(x, y, contents) {
    var $content_div;
    $content_div = $('<div id="flot-tooltip">' + contents + '</div>').appendTo("body");
    return $content_div.css({
      display: "none",
      visibility: "visible",
      top: y - $content_div.height() - 11,
      left: x - $content_div.width() - 11
    }).fadeIn("fast");
  };

  previousPoint = null;

  $("#chartTotal, #chartPartials").bind("plothover", function(event, pos, item) {
    var x, y;
    if (item) {
      if (previousPoint === item.dataIndex) {
        return;
      }
      previousPoint = item.dataIndex;
      $("#flot-tooltip").remove();
      x = item.datapoint[0];
      y = item.datapoint[1].toFixed(2);
      return showTooltip(item.pageX, item.pageY, "" + WageWizard.messages.substitution_minute + ": " + x + "<br/>" + WageWizard.messages.contribution + ": " + y);
    } else {
      $("#flot-tooltip").remove();
      return previousPoint = null;
    }
  });

  setDiscountedSalary = function() {
    var input, rate;
    input = Number($("#ageDiscountCalculationSalary").val().replace(/[^\d]/g, ''));
    if (input < 250) {
      $("#ageDiscountCalculationDiscountedSalary").val('');
      return;
    }
    rate = WageWizard.Engine.getRate($("#ageDiscountCalculation").val());
    return $("#ageDiscountCalculationDiscountedSalary").val(WageWizard.number_format((input - 250) * rate + 250, 0, '', ' '));
  };

  $("#ageDiscountCalculation").on("change", function() {
    $("#ageDiscountCalculationTarget").text(WageWizard.number_format(100 - WageWizard.Engine.getRate($(this).val()) * 100, 0));
    return setDiscountedSalary();
  });

  $("#ageDiscountCalculationSalary").on("keyup", setDiscountedSalary);

  $("#extraLink").on("click", function(e) {
    e.preventDefault();
    $("#tabExtraNav").find("a").tab("show");
    $('#helpModal').modal('toggle');
    return false;
  });

  $('a.accordion-toggle[data-toggle="collapse"]').on('click', function(e) {
    var $target, $this;
    $this = $(this);
    $target = $($this.attr('href'));
    if ($target.css('height') !== '0px') {
      return $target.addClass('in');
    }
  });

  WageWizard.format = format;

  WageWizard.number_format = number_format;

  WageWizard.isChartsEnabled = isChartsEnabled;

  WageWizard.isVerboseModeEnabled = isVerboseModeEnabled;

  WageWizard.isPressingEnabled = isPressingEnabled;

  WageWizard.isAdvancedModeEnabled = isAdvancedModeEnabled;

  createPlayerFromForm = function(id) {
    var k, player, v, _ref;
    player = {
      Age: $("#WageWizard_Player_" + id + "_Age").val(),
      Abroad: $("#WageWizard_Player_" + id + "_Abroad").prop('checked'),
      Salary: $("#WageWizard_Player_" + id + "_Salary").val()
    };
    _ref = WageWizard.MAP_HATTRICK_SKILLS;
    for (k in _ref) {
      v = _ref[k];
      player[v] = $("#WageWizard_Player_" + id + "_" + k).val();
    }
    WageWizard.Engine.setPlayerData(player, $("input[name=WageWizard_Primary_Player_" + id + "]:checked").val());
    return player;
  };

  createCountryDropbox = function() {
    var country, countryArray, countryId, countryOptions, k, v, _i, _len, _ref;
    countryArray = [];
    _ref = WageWizard.COUNTRY_DETAILS;
    for (k in _ref) {
      v = _ref[k];
      countryArray.push({
        id: k,
        name: v.CountryName
      });
    }
    countryArray.sort(sort_by('name', false));
    countryId = $('#WageWizard_Country').data('country').toString();
    countryOptions = [];
    for (_i = 0, _len = countryArray.length; _i < _len; _i++) {
      country = countryArray[_i];
      countryOptions.push("<option value='" + country.id + "'" + (country.id === countryId ? ' selected' : '') + ">" + country.name + "</option>");
    }
    $('#WageWizard_Country').html(countryOptions.join());
    return WageWizard.CountryDetails = WageWizard.COUNTRY_DETAILS[countryId];
  };

  refreshTable = function(id) {
    var player;
    player = createPlayerFromForm(id);
    return setTableFields(player, id);
  };

  $(function() {
    var hasParams;
    checkIframe();
    hasParams = gup("params") != null;
    if (hasParams) {
      fillForm();
    }
    if (hasParams && AUTOSTART) {
      $(FORM_ID).submit();
    }
    $("#imgMadeInItaly").tooltip();
    if (document.startAjax) {
      $.ajax({
        url: "chpp/chpp_retrievedata.php",
        cache: true
      });
    } else {
      createCountryDropbox();
      $('.wagewizard-country').show();
      refreshTable(1);
    }
    $('[data-colorize]').bind('DOMSubtreeModified', function() {
      return colorizePercent($(this));
    });
    $('#WageWizard_Country').on('change', function() {
      return WageWizard.CountryDetails = WageWizard.COUNTRY_DETAILS[$(this).val()];
    });
    return $('.refresh-table').on('change', function() {
      return refreshTable($(this).data('id'));
    });
  });

}).call(this);
